
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  walletAddress: 'walletAddress',
  verifiedAt: 'verifiedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logoUrl: 'logoUrl',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  acceptedCurrencies: 'acceptedCurrencies',
  notificationEmails: 'notificationEmails'
};

exports.Prisma.ApiTokenScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  tokenHash: 'tokenHash',
  environment: 'environment',
  allowedDomains: 'allowedDomains',
  lastUsedAt: 'lastUsedAt',
  requestCount: 'requestCount',
  createdAt: 'createdAt',
  revokedAt: 'revokedAt',
  status: 'status'
};

exports.Prisma.WebhookEndpointScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  url: 'url',
  description: 'description',
  secret: 'secret',
  status: 'status',
  eventTypes: 'eventTypes',
  lastTimeHit: 'lastTimeHit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  tokenId: 'tokenId',
  amount: 'amount',
  currency: 'currency',
  recipientAddress: 'recipientAddress',
  txHash: 'txHash',
  blockNumber: 'blockNumber',
  status: 'status',
  failureReason: 'failureReason',
  monitoringStartedAt: 'monitoringStartedAt',
  confirmedAt: 'confirmedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  idempotencyKey: 'idempotencyKey'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  type: 'type',
  sessionId: 'sessionId',
  paymentId: 'paymentId',
  tokenId: 'tokenId',
  metadata: 'metadata',
  occurredAt: 'occurredAt',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metadata: 'metadata',
  paymentId: 'paymentId'
};

exports.Prisma.EventDeliveryScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  endpointId: 'endpointId',
  attemptNumber: 'attemptNumber',
  deliveryStatus: 'deliveryStatus',
  httpStatusCode: 'httpStatusCode',
  errorMessage: 'errorMessage',
  responseBody: 'responseBody',
  createdAt: 'createdAt',
  deliveredAt: 'deliveredAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AllowedCurrency = exports.$Enums.AllowedCurrency = {
  USDC: 'USDC',
  USDT: 'USDT'
};

exports.EventType = exports.$Enums.EventType = {
  PAYMENT_COMPLETED: 'PAYMENT_COMPLETED',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  PAYMENT_PENDING: 'PAYMENT_PENDING'
};

exports.TokenEnvironment = exports.$Enums.TokenEnvironment = {
  TEST: 'TEST',
  LIVE: 'LIVE'
};

exports.TokenStatus = exports.$Enums.TokenStatus = {
  ACTIVE: 'ACTIVE',
  REVOKED: 'REVOKED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  PENDING: 'PENDING',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED',
  RETRYING: 'RETRYING'
};

exports.WebhookEndpointStatus = exports.$Enums.WebhookEndpointStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  REVOKED: 'REVOKED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Project: 'Project',
  ApiToken: 'ApiToken',
  WebhookEndpoint: 'WebhookEndpoint',
  Payment: 'Payment',
  Event: 'Event',
  Product: 'Product',
  EventDelivery: 'EventDelivery'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/abstergo/Programming/Projects/Okito/apps/checkout/lib/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/abstergo/Programming/Projects/Okito/apps/checkout/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id            String    @id\n  name          String\n  email         String\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  walletAddress String?\n  verifiedAt    DateTime?\n  sessions      Session[]\n  accounts      Account[]\n  projects      Project[]\n\n  @@unique([email])\n  @@map(\"user\")\n}\n\nmodel Session {\n  id        String   @id\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map(\"session\")\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map(\"account\")\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map(\"verification\")\n}\n\nmodel Project {\n  id                 String            @id @default(uuid())\n  name               String\n  logoUrl            String?\n  description        String?\n  createdAt          DateTime          @default(now())\n  updatedAt          DateTime          @updatedAt\n  userId             String\n  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)\n  acceptedCurrencies AllowedCurrency[]\n  notificationEmails String[]\n  apiTokens          ApiToken[]\n  payments           Payment[]\n  events             Event[]\n  webhookEndpoints   WebhookEndpoint[]\n\n  @@unique([name])\n  @@map(\"project\")\n}\n\nmodel ApiToken {\n  id             String           @id @default(uuid())\n  projectId      String\n  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  tokenHash      String           @unique // SHA-256 hash of actual token\n  environment    TokenEnvironment @default(TEST)\n  allowedDomains String[] // Array of allowed domains\n  lastUsedAt     DateTime?\n  requestCount   Int              @default(0)\n  createdAt      DateTime         @default(now())\n  revokedAt      DateTime?\n  status         TokenStatus      @default(ACTIVE)\n  payments       Payment[]\n  events         Event[]          @relation(\"TokenEvent\")\n\n  @@map(\"api_token\")\n}\n\nmodel WebhookEndpoint {\n  id          String                @id @default(uuid())\n  projectId   String\n  project     Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  url         String\n  description String?\n  secret      String\n  status      WebhookEndpointStatus @default(ACTIVE)\n  eventTypes  EventType[] // If empty => receive all events for the project\n  lastTimeHit DateTime?\n  createdAt   DateTime              @default(now())\n  updatedAt   DateTime              @updatedAt\n  deliveries  EventDelivery[]\n\n  @@index([projectId])\n  @@map(\"webhook_endpoint\")\n}\n\nmodel Payment {\n  id               String          @id @default(uuid())\n  projectId        String\n  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  tokenId          String?\n  token            ApiToken?       @relation(fields: [tokenId], references: [id], onDelete: SetNull)\n  amount           BigInt\n  currency         AllowedCurrency\n  recipientAddress String\n  products         Product[]\n\n  txHash              String?       @unique\n  blockNumber         BigInt?\n  status              PaymentStatus @default(PENDING)\n  failureReason       String?\n  monitoringStartedAt DateTime      @default(now())\n  confirmedAt         DateTime?\n  createdAt           DateTime      @default(now())\n  updatedAt           DateTime      @updatedAt\n  idempotencyKey      String?       @unique\n  events              Event[]       @relation(\"PaymentEvent\")\n\n  @@map(\"payment\")\n}\n\nmodel Event {\n  id         String          @id @default(uuid())\n  projectId  String\n  project    Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  type       EventType // e.g. payment.pending, payment.confirmed, token.revoked\n  sessionId  String          @unique @default(uuid())\n  paymentId  String?\n  payment    Payment?        @relation(name: \"PaymentEvent\", fields: [paymentId], references: [id], onDelete: SetNull)\n  tokenId    String?\n  token      ApiToken?       @relation(name: \"TokenEvent\", fields: [tokenId], references: [id], onDelete: SetNull)\n  metadata   Json?\n  occurredAt DateTime        @default(now())\n  createdAt  DateTime        @default(now())\n  deliveries EventDelivery[]\n\n  @@index([projectId, type, createdAt])\n  @@index([paymentId])\n  @@map(\"event\")\n}\n\nmodel Product {\n  id        String   @id @default(uuid())\n  name      String\n  price     BigInt\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  metadata  Json?\n  paymentId String\n  payment   Payment  @relation(fields: [paymentId], references: [id])\n\n  @@index([name])\n  @@map(\"product\")\n}\n\nmodel EventDelivery {\n  id             String          @id @default(uuid())\n  eventId        String\n  event          Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)\n  endpointId     String\n  endpoint       WebhookEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)\n  attemptNumber  Int             @default(1)\n  deliveryStatus DeliveryStatus  @default(PENDING)\n  httpStatusCode Int?\n  errorMessage   String?\n  responseBody   String?\n  createdAt      DateTime        @default(now())\n  deliveredAt    DateTime?\n\n  @@index([eventId])\n  @@index([endpointId])\n  @@map(\"event_delivery\")\n}\n\nenum AllowedCurrency {\n  USDC\n  USDT\n}\n\nenum EventType {\n  PAYMENT_COMPLETED\n  PAYMENT_FAILED\n  PAYMENT_PENDING\n}\n\nenum TokenEnvironment {\n  TEST\n  LIVE\n\n  @@map(\"token_environment\")\n}\n\nenum TokenStatus {\n  ACTIVE\n  REVOKED\n\n  @@map(\"token_status\")\n}\n\nenum PaymentStatus {\n  PENDING\n  CONFIRMED\n  FAILED\n\n  @@map(\"payment_status\")\n}\n\nenum DeliveryStatus {\n  PENDING\n  DELIVERED\n  FAILED\n  RETRYING\n\n  @@map(\"delivery_status\")\n}\n\nenum WebhookEndpointStatus {\n  ACTIVE\n  INACTIVE\n  REVOKED\n\n  @@map(\"webhook_endpoint_status\")\n}\n",
  "inlineSchemaHash": "f63baace508e58868874d91ec2f97e5c4223c2e44f024c234ea5e54b9c326aec",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToUser\"}],\"dbName\":\"user\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"session\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"refreshTokenExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"account\"},\"Verification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification\"},\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProjectToUser\"},{\"name\":\"acceptedCurrencies\",\"kind\":\"enum\",\"type\":\"AllowedCurrency\"},{\"name\":\"notificationEmails\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"apiTokens\",\"kind\":\"object\",\"type\":\"ApiToken\",\"relationName\":\"ApiTokenToProject\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToProject\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToProject\"},{\"name\":\"webhookEndpoints\",\"kind\":\"object\",\"type\":\"WebhookEndpoint\",\"relationName\":\"ProjectToWebhookEndpoint\"}],\"dbName\":\"project\"},\"ApiToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ApiTokenToProject\"},{\"name\":\"tokenHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"environment\",\"kind\":\"enum\",\"type\":\"TokenEnvironment\"},{\"name\":\"allowedDomains\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastUsedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"requestCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"revokedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TokenStatus\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"ApiTokenToPayment\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"TokenEvent\"}],\"dbName\":\"api_token\"},\"WebhookEndpoint\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToWebhookEndpoint\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"secret\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"WebhookEndpointStatus\"},{\"name\":\"eventTypes\",\"kind\":\"enum\",\"type\":\"EventType\"},{\"name\":\"lastTimeHit\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deliveries\",\"kind\":\"object\",\"type\":\"EventDelivery\",\"relationName\":\"EventDeliveryToWebhookEndpoint\"}],\"dbName\":\"webhook_endpoint\"},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"PaymentToProject\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"object\",\"type\":\"ApiToken\",\"relationName\":\"ApiTokenToPayment\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"AllowedCurrency\"},{\"name\":\"recipientAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"PaymentToProduct\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"failureReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"monitoringStartedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"confirmedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"idempotencyKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"PaymentEvent\"}],\"dbName\":\"payment\"},\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"EventToProject\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"EventType\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentEvent\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"object\",\"type\":\"ApiToken\",\"relationName\":\"TokenEvent\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"occurredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deliveries\",\"kind\":\"object\",\"type\":\"EventDelivery\",\"relationName\":\"EventToEventDelivery\"}],\"dbName\":\"event\"},\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToProduct\"}],\"dbName\":\"product\"},\"EventDelivery\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToEventDelivery\"},{\"name\":\"endpointId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endpoint\",\"kind\":\"object\",\"type\":\"WebhookEndpoint\",\"relationName\":\"EventDeliveryToWebhookEndpoint\"},{\"name\":\"attemptNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"deliveryStatus\",\"kind\":\"enum\",\"type\":\"DeliveryStatus\"},{\"name\":\"httpStatusCode\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"responseBody\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deliveredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"event_delivery\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

